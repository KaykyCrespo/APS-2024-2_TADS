import time
import timeit
import cProfile
import tracemalloc
import pytest
from memory_profiler import profile


def bubble_sort(lista):
    # Este é o loop externo que controla o número de passes que o algoritmo de ordenação precisa fazer. 
    # Ele começa em len(lista) - 1 e vai até 1, decrementando n a cada iteração. 
    # O valor inicial é o comprimento da lista menos 1 porque na última iteração do loop, 
    # só um elemento resta para ser verificado.
    for n in range(len(lista) - 1, 0, -1):
        # Este é o loop interno que percorre a lista comparando elementos adjacentes. 
        # Ele vai de 0 até n - 1. Cada iteração compara o elemento i com o elemento i + 1.
        for i in range(n):
            # Aqui, o código compara lista[i] e lista[i + 1]. Se lista[i] é maior que lista[i + 1], 
            # significa que os elementos estão fora de ordem e precisam ser trocados.
            if lista[i] > lista[i + 1]:
                    # A troca é realizada através da linha lista[i], lista[i + 1] = lista[i + 1], lista[i]. 
                    # Esta linha troca os valores de lista[i] e lista[i + 1].
                    lista[i], lista[i + 1] = lista[i + 1], lista[i]

# Sample list to be sorted
lista =  [264, 357, 202, 130, 259, 350, 190, 158, 489, 396, 292, 418, 146, 226, 445, 23, 163, 392, 331, 359, 224, 249, 107, 222, 251, 374, 222, 186, 7, 422, 0, 448, 161, 188, 244, 110, 211, 134, 381, 323, 423, 81, 14, 181, 454, 48, 481, 20, 81, 11, 224, 139, 216, 87, 132, 322, 129, 393, 285, 405, 398, 389, 20, 245, 255, 158, 202, 459, 467, 257, 280, 169, 39, 49, 237, 8, 357, 144, 371, 339, 26, 42, 99, 427, 4, 327, 243, 158, 85, 367, 134, 87, 312, 36, 160, 387, 414, 297, 389, 432, 227, 386, 358, 8, 443, 386, 266, 186, 459, 356, 343, 428, 489, 491, 204, 251, 40, 163, 212, 109, 75, 492, 430, 249, 7, 234, 84, 65, 224, 108, 229, 468, 264, 491, 128, 392, 215, 115, 270, 481, 398, 400, 11, 466, 159, 444, 69, 92, 472, 444, 162, 245, 213, 42, 31, 397, 263, 410, 34, 200, 450, 233, 429, 108, 441, 355, 160, 53, 194, 241, 215, 433, 67, 185, 19, 467, 16, 25, 471, 167, 269, 42, 47, 162, 370, 54, 316, 412, 155, 365, 29, 442, 13, 105, 372, 33, 74, 39, 251, 22, 10, 267, 265, 119, 46, 224, 342, 1, 396, 241, 31, 168, 161, 203, 339, 331, 270, 393, 173, 103, 242, 192, 137, 70, 290, 197, 20, 347, 491, 151, 51, 484, 143, 270, 339, 324, 109, 450, 355, 473, 78, 276, 158, 415, 372, 325, 182, 232, 438, 158, 479, 280, 419, 451, 396, 78, 152, 396, 105, 13, 242, 89, 487, 471, 102, 232, 390, 481, 458, 52, 66, 482, 195, 476, 214, 94, 302, 143, 116, 488, 178, 98, 150, 289, 66, 235, 345, 282, 176, 323, 258, 147, 270, 373, 34, 415, 86, 394, 9, 140, 211, 326, 65, 214, 94, 146, 1, 338, 493, 32, 120, 447, 495, 29, 6, 247, 117, 392, 478, 211, 317, 190, 191, 318, 126, 369, 414, 180, 355, 236, 232, 291, 449, 213, 174, 346, 148, 268, 83, 271, 70, 47, 187, 78, 458, 376, 293, 218, 7, 348, 26, 313, 331, 399, 282, 275, 405, 286, 58, 185, 92, 261, 297, 478, 442, 93, 262, 254, 391, 201, 80, 144, 51, 420, 435, 131, 42, 338, 153, 335, 373, 225, 117, 368, 408, 293, 92, 209, 339, 11, 222, 147, 18, 366, 276, 373, 216, 304, 204, 79, 297, 36, 177, 431, 242, 314, 139, 474, 196, 272, 2, 437, 444, 385, 321, 496, 127, 109, 288, 401, 156, 7, 417, 116, 335, 426, 372, 41, 59, 204, 86, 303, 489, 27, 111, 363, 40, 160, 1, 131, 340, 291, 312, 214, 121, 274, 266, 396, 298, 370, 113, 447, 392, 239, 32, 440, 124, 318, 379, 129, 15, 368, 212, 445, 471, 60, 32, 499, 404, 43, 46, 20, 383, 392, 16, 66, 139, 133, 2, 407, 101, 181, 408, 11, 377, 377, 237, 249, 206, 305, 43, 100, 232, 25, 242, 176, 375, 56, 202, 260, 442, 193, 34, 209, 199, 211, 6, 427, 340, 268, 0, 157, 220, 355, 17, 29, 384, 1, 77, 221, 335, 189, 375, 335, 198, 116, 311, 120, 286, 65, 255, 466, 487, 274, 439, 107, 84, 417, 475, 440, 365, 303, 307, 88, 253, 38, 413, 77, 444, 132, 500, 405, 455, 332, 68, 88, 190, 164, 326, 473, 257, 204, 408, 351, 30, 131, 275, 430, 452, 323, 378, 185, 189, 433, 262, 389, 97, 451, 144, 336, 394, 116, 260, 188, 320, 194, 235, 139, 232, 91, 442, 376, 46, 143, 107, 219, 29, 146, 213, 270, 96, 361, 168, 343, 324, 368, 165, 166, 368, 318, 259, 54, 261, 102, 66, 447, 424, 409, 252, 13, 429, 301, 448, 279, 237, 284, 240, 92, 460, 89, 482, 258, 253, 28, 240, 184, 365, 455, 178, 171, 317, 205, 494, 299, 374, 130, 362, 300, 115, 209, 421, 481, 331, 119, 89, 185, 240, 25, 334, 219, 183, 110, 466, 280, 91, 183, 311, 327, 369, 375, 102, 136, 498, 137, 489, 46, 139, 192, 343, 57, 363, 54, 444, 0, 138, 62, 64, 344, 268, 368, 135, 30, 260, 82, 132, 96, 283, 82, 255, 312, 244, 305, 38, 280, 83, 145, 244, 49, 14, 100, 470, 500, 112, 17, 87, 384, 0, 332, 376, 107, 72, 174, 79, 58, 138, 364, 458, 205, 153, 273, 81, 161, 427, 325, 31, 171, 139, 313, 388, 346, 338, 236, 151, 429, 142, 386, 379, 7, 393, 271, 282, 71, 367, 48, 104, 491, 232, 91, 268, 413, 4, 293, 372, 403, 15, 131, 90, 381, 346, 20, 52, 139, 451, 16, 48, 301, 233, 481, 302, 359, 181, 2, 344, 337, 239, 420, 36, 358, 424, 476, 452, 226, 47, 355, 475, 71, 284, 332, 132, 10, 65, 283, 394, 299, 351, 143, 482, 448, 251, 409, 25, 290, 181, 99, 22, 38, 357, 102, 245, 451, 386, 418, 131, 408, 367, 110, 425, 317, 114, 238, 261, 88, 379, 353, 466, 409, 209, 12, 385, 284, 479, 185, 285, 306, 475, 170, 181, 61, 88, 228, 378, 477, 403, 115, 416, 358, 6, 384, 103, 400, 207, 358, 164, 452, 138, 405, 499, 360, 438, 77, 452, 241, 54, 287, 115, 134, 105, 124, 169, 412, 446, 443, 286, 77, 134, 306, 380, 365, 404, 229, 42, 402, 465, 385, 377, 442, 303, 307, 264, 328, 500, 215, 163, 34, 423, 406, 124, 486, 305, 242, 431, 396, 441, 154, 497, 340, 397, 311, 461, 238, 18, 362, 3, 179, 144, 5, 19, 262, 156, 432, 373]
print("Unsorted list is:")
print(lista)


# Medir o uso de memória com tracemalloc
tracemalloc.start()
bubble_sort(lista)
snapshot = tracemalloc.take_snapshot()
top_stats = snapshot.statistics('lineno')


# Medir o tempo de execução com time.process_time()
# time.process_time() medirá apenas o tempo de CPU efetivo utilizado, ignorando o tempo de espera.
start_time = time.perf_counter()
bubble_sort(lista)
end_time = time.perf_counter()
elapsed_time_perf_counter = end_time - start_time
print(f"Tempo decorrido com perf_counter: {elapsed_time_perf_counter:.6f} segundos")

# Medir o tempo de execução com time.process_time()
# time.process_time() medirá apenas o tempo de CPU efetivo utilizado, ignorando o tempo de espera.
start_time = time.process_time()
bubble_sort(lista)
end_time = time.process_time()
elapsed_time_process_time = end_time - start_time
print(f"Tempo de CPU com process_time: {elapsed_time_process_time:.6f} segundos")

# Usando timeit para medir o tempo médio de execução
timeit_result = timeit.timeit("bubble_sort(lista = [264, 357, 202, 130, 259, 350, 190, 158, 489, 396, 292, 418, 146, 226, 445, 23, 163, 392, 331, 359, 224, 249, 107, 222, 251, 374, 222, 186, 7, 422, 0, 448, 161, 188, 244, 110, 211, 134, 381, 323, 423, 81, 14, 181, 454, 48, 481, 20, 81, 11, 224, 139, 216, 87, 132, 322, 129, 393, 285, 405, 398, 389, 20, 245, 255, 158, 202, 459, 467, 257, 280, 169, 39, 49, 237, 8, 357, 144, 371, 339, 26, 42, 99, 427, 4, 327, 243, 158, 85, 367, 134, 87, 312, 36, 160, 387, 414, 297, 389, 432, 227, 386, 358, 8, 443, 386, 266, 186, 459, 356, 343, 428, 489, 491, 204, 251, 40, 163, 212, 109, 75, 492, 430, 249, 7, 234, 84, 65, 224, 108, 229, 468, 264, 491, 128, 392, 215, 115, 270, 481, 398, 400, 11, 466, 159, 444, 69, 92, 472, 444, 162, 245, 213, 42, 31, 397, 263, 410, 34, 200, 450, 233, 429, 108, 441, 355, 160, 53, 194, 241, 215, 433, 67, 185, 19, 467, 16, 25, 471, 167, 269, 42, 47, 162, 370, 54, 316, 412, 155, 365, 29, 442, 13, 105, 372, 33, 74, 39, 251, 22, 10, 267, 265, 119, 46, 224, 342, 1, 396, 241, 31, 168, 161, 203, 339, 331, 270, 393, 173, 103, 242, 192, 137, 70, 290, 197, 20, 347, 491, 151, 51, 484, 143, 270, 339, 324, 109, 450, 355, 473, 78, 276, 158, 415, 372, 325, 182, 232, 438, 158, 479, 280, 419, 451, 396, 78, 152, 396, 105, 13, 242, 89, 487, 471, 102, 232, 390, 481, 458, 52, 66, 482, 195, 476, 214, 94, 302, 143, 116, 488, 178, 98, 150, 289, 66, 235, 345, 282, 176, 323, 258, 147, 270, 373, 34, 415, 86, 394, 9, 140, 211, 326, 65, 214, 94, 146, 1, 338, 493, 32, 120, 447, 495, 29, 6, 247, 117, 392, 478, 211, 317, 190, 191, 318, 126, 369, 414, 180, 355, 236, 232, 291, 449, 213, 174, 346, 148, 268, 83, 271, 70, 47, 187, 78, 458, 376, 293, 218, 7, 348, 26, 313, 331, 399, 282, 275, 405, 286, 58, 185, 92, 261, 297, 478, 442, 93, 262, 254, 391, 201, 80, 144, 51, 420, 435, 131, 42, 338, 153, 335, 373, 225, 117, 368, 408, 293, 92, 209, 339, 11, 222, 147, 18, 366, 276, 373, 216, 304, 204, 79, 297, 36, 177, 431, 242, 314, 139, 474, 196, 272, 2, 437, 444, 385, 321, 496, 127, 109, 288, 401, 156, 7, 417, 116, 335, 426, 372, 41, 59, 204, 86, 303, 489, 27, 111, 363, 40, 160, 1, 131, 340, 291, 312, 214, 121, 274, 266, 396, 298, 370, 113, 447, 392, 239, 32, 440, 124, 318, 379, 129, 15, 368, 212, 445, 471, 60, 32, 499, 404, 43, 46, 20, 383, 392, 16, 66, 139, 133, 2, 407, 101, 181, 408, 11, 377, 377, 237, 249, 206, 305, 43, 100, 232, 25, 242, 176, 375, 56, 202, 260, 442, 193, 34, 209, 199, 211, 6, 427, 340, 268, 0, 157, 220, 355, 17, 29, 384, 1, 77, 221, 335, 189, 375, 335, 198, 116, 311, 120, 286, 65, 255, 466, 487, 274, 439, 107, 84, 417, 475, 440, 365, 303, 307, 88, 253, 38, 413, 77, 444, 132, 500, 405, 455, 332, 68, 88, 190, 164, 326, 473, 257, 204, 408, 351, 30, 131, 275, 430, 452, 323, 378, 185, 189, 433, 262, 389, 97, 451, 144, 336, 394, 116, 260, 188, 320, 194, 235, 139, 232, 91, 442, 376, 46, 143, 107, 219, 29, 146, 213, 270, 96, 361, 168, 343, 324, 368, 165, 166, 368, 318, 259, 54, 261, 102, 66, 447, 424, 409, 252, 13, 429, 301, 448, 279, 237, 284, 240, 92, 460, 89, 482, 258, 253, 28, 240, 184, 365, 455, 178, 171, 317, 205, 494, 299, 374, 130, 362, 300, 115, 209, 421, 481, 331, 119, 89, 185, 240, 25, 334, 219, 183, 110, 466, 280, 91, 183, 311, 327, 369, 375, 102, 136, 498, 137, 489, 46, 139, 192, 343, 57, 363, 54, 444, 0, 138, 62, 64, 344, 268, 368, 135, 30, 260, 82, 132, 96, 283, 82, 255, 312, 244, 305, 38, 280, 83, 145, 244, 49, 14, 100, 470, 500, 112, 17, 87, 384, 0, 332, 376, 107, 72, 174, 79, 58, 138, 364, 458, 205, 153, 273, 81, 161, 427, 325, 31, 171, 139, 313, 388, 346, 338, 236, 151, 429, 142, 386, 379, 7, 393, 271, 282, 71, 367, 48, 104, 491, 232, 91, 268, 413, 4, 293, 372, 403, 15, 131, 90, 381, 346, 20, 52, 139, 451, 16, 48, 301, 233, 481, 302, 359, 181, 2, 344, 337, 239, 420, 36, 358, 424, 476, 452, 226, 47, 355, 475, 71, 284, 332, 132, 10, 65, 283, 394, 299, 351, 143, 482, 448, 251, 409, 25, 290, 181, 99, 22, 38, 357, 102, 245, 451, 386, 418, 131, 408, 367, 110, 425, 317, 114, 238, 261, 88, 379, 353, 466, 409, 209, 12, 385, 284, 479, 185, 285, 306, 475, 170, 181, 61, 88, 228, 378, 477, 403, 115, 416, 358, 6, 384, 103, 400, 207, 358, 164, 452, 138, 405, 499, 360, 438, 77, 452, 241, 54, 287, 115, 134, 105, 124, 169, 412, 446, 443, 286, 77, 134, 306, 380, 365, 404, 229, 42, 402, 465, 385, 377, 442, 303, 307, 264, 328, 500, 215, 163, 34, 423, 406, 124, 486, 305, 242, 431, 396, 441, 154, 497, 340, 397, 311, 461, 238, 18, 362, 3, 179, 144, 5, 19, 262, 156, 432, 373])", 
                              setup="from __main__ import bubble_sort", number=1000)
print(f"Tempo médio com timeit (1000 execuções): {timeit_result:.6f} segundos")

# Usando cProfile para analisar o desempenho do bubble_sort
print("\nAnálise de desempenho com cProfile:")
cProfile.run('bubble_sort(lista = [264, 357, 202, 130, 259, 350, 190, 158, 489, 396, 292, 418, 146, 226, 445, 23, 163, 392, 331, 359, 224, 249, 107, 222, 251, 374, 222, 186, 7, 422, 0, 448, 161, 188, 244, 110, 211, 134, 381, 323, 423, 81, 14, 181, 454, 48, 481, 20, 81, 11, 224, 139, 216, 87, 132, 322, 129, 393, 285, 405, 398, 389, 20, 245, 255, 158, 202, 459, 467, 257, 280, 169, 39, 49, 237, 8, 357, 144, 371, 339, 26, 42, 99, 427, 4, 327, 243, 158, 85, 367, 134, 87, 312, 36, 160, 387, 414, 297, 389, 432, 227, 386, 358, 8, 443, 386, 266, 186, 459, 356, 343, 428, 489, 491, 204, 251, 40, 163, 212, 109, 75, 492, 430, 249, 7, 234, 84, 65, 224, 108, 229, 468, 264, 491, 128, 392, 215, 115, 270, 481, 398, 400, 11, 466, 159, 444, 69, 92, 472, 444, 162, 245, 213, 42, 31, 397, 263, 410, 34, 200, 450, 233, 429, 108, 441, 355, 160, 53, 194, 241, 215, 433, 67, 185, 19, 467, 16, 25, 471, 167, 269, 42, 47, 162, 370, 54, 316, 412, 155, 365, 29, 442, 13, 105, 372, 33, 74, 39, 251, 22, 10, 267, 265, 119, 46, 224, 342, 1, 396, 241, 31, 168, 161, 203, 339, 331, 270, 393, 173, 103, 242, 192, 137, 70, 290, 197, 20, 347, 491, 151, 51, 484, 143, 270, 339, 324, 109, 450, 355, 473, 78, 276, 158, 415, 372, 325, 182, 232, 438, 158, 479, 280, 419, 451, 396, 78, 152, 396, 105, 13, 242, 89, 487, 471, 102, 232, 390, 481, 458, 52, 66, 482, 195, 476, 214, 94, 302, 143, 116, 488, 178, 98, 150, 289, 66, 235, 345, 282, 176, 323, 258, 147, 270, 373, 34, 415, 86, 394, 9, 140, 211, 326, 65, 214, 94, 146, 1, 338, 493, 32, 120, 447, 495, 29, 6, 247, 117, 392, 478, 211, 317, 190, 191, 318, 126, 369, 414, 180, 355, 236, 232, 291, 449, 213, 174, 346, 148, 268, 83, 271, 70, 47, 187, 78, 458, 376, 293, 218, 7, 348, 26, 313, 331, 399, 282, 275, 405, 286, 58, 185, 92, 261, 297, 478, 442, 93, 262, 254, 391, 201, 80, 144, 51, 420, 435, 131, 42, 338, 153, 335, 373, 225, 117, 368, 408, 293, 92, 209, 339, 11, 222, 147, 18, 366, 276, 373, 216, 304, 204, 79, 297, 36, 177, 431, 242, 314, 139, 474, 196, 272, 2, 437, 444, 385, 321, 496, 127, 109, 288, 401, 156, 7, 417, 116, 335, 426, 372, 41, 59, 204, 86, 303, 489, 27, 111, 363, 40, 160, 1, 131, 340, 291, 312, 214, 121, 274, 266, 396, 298, 370, 113, 447, 392, 239, 32, 440, 124, 318, 379, 129, 15, 368, 212, 445, 471, 60, 32, 499, 404, 43, 46, 20, 383, 392, 16, 66, 139, 133, 2, 407, 101, 181, 408, 11, 377, 377, 237, 249, 206, 305, 43, 100, 232, 25, 242, 176, 375, 56, 202, 260, 442, 193, 34, 209, 199, 211, 6, 427, 340, 268, 0, 157, 220, 355, 17, 29, 384, 1, 77, 221, 335, 189, 375, 335, 198, 116, 311, 120, 286, 65, 255, 466, 487, 274, 439, 107, 84, 417, 475, 440, 365, 303, 307, 88, 253, 38, 413, 77, 444, 132, 500, 405, 455, 332, 68, 88, 190, 164, 326, 473, 257, 204, 408, 351, 30, 131, 275, 430, 452, 323, 378, 185, 189, 433, 262, 389, 97, 451, 144, 336, 394, 116, 260, 188, 320, 194, 235, 139, 232, 91, 442, 376, 46, 143, 107, 219, 29, 146, 213, 270, 96, 361, 168, 343, 324, 368, 165, 166, 368, 318, 259, 54, 261, 102, 66, 447, 424, 409, 252, 13, 429, 301, 448, 279, 237, 284, 240, 92, 460, 89, 482, 258, 253, 28, 240, 184, 365, 455, 178, 171, 317, 205, 494, 299, 374, 130, 362, 300, 115, 209, 421, 481, 331, 119, 89, 185, 240, 25, 334, 219, 183, 110, 466, 280, 91, 183, 311, 327, 369, 375, 102, 136, 498, 137, 489, 46, 139, 192, 343, 57, 363, 54, 444, 0, 138, 62, 64, 344, 268, 368, 135, 30, 260, 82, 132, 96, 283, 82, 255, 312, 244, 305, 38, 280, 83, 145, 244, 49, 14, 100, 470, 500, 112, 17, 87, 384, 0, 332, 376, 107, 72, 174, 79, 58, 138, 364, 458, 205, 153, 273, 81, 161, 427, 325, 31, 171, 139, 313, 388, 346, 338, 236, 151, 429, 142, 386, 379, 7, 393, 271, 282, 71, 367, 48, 104, 491, 232, 91, 268, 413, 4, 293, 372, 403, 15, 131, 90, 381, 346, 20, 52, 139, 451, 16, 48, 301, 233, 481, 302, 359, 181, 2, 344, 337, 239, 420, 36, 358, 424, 476, 452, 226, 47, 355, 475, 71, 284, 332, 132, 10, 65, 283, 394, 299, 351, 143, 482, 448, 251, 409, 25, 290, 181, 99, 22, 38, 357, 102, 245, 451, 386, 418, 131, 408, 367, 110, 425, 317, 114, 238, 261, 88, 379, 353, 466, 409, 209, 12, 385, 284, 479, 185, 285, 306, 475, 170, 181, 61, 88, 228, 378, 477, 403, 115, 416, 358, 6, 384, 103, 400, 207, 358, 164, 452, 138, 405, 499, 360, 438, 77, 452, 241, 54, 287, 115, 134, 105, 124, 169, 412, 446, 443, 286, 77, 134, 306, 380, 365, 404, 229, 42, 402, 465, 385, 377, 442, 303, 307, 264, 328, 500, 215, 163, 34, 423, 406, 124, 486, 305, 242, 431, 396, 441, 154, 497, 340, 397, 311, 461, 238, 18, 362, 3, 179, 144, 5, 19, 262, 156, 432, 373]v)')

# Função de teste para medir o desempenho usando pytest-benchmark
def test_bubble_sort_benchmark(benchmark):
    """
    Teste de benchmark para a função bubble_sort usando pytest-benchmark.
    """
    lista_teste = [264, 357, 202, 130, 259, 350, 190, 158, 489, 396, 292, 418, 146, 226, 445, 23, 163, 392, 331, 359, 224, 249, 107, 222, 251, 374, 222, 186, 7, 422, 0, 448, 161, 188, 244, 110, 211, 134, 381, 323, 423, 81, 14, 181, 454, 48, 481, 20, 81, 11, 224, 139, 216, 87, 132, 322, 129, 393, 285, 405, 398, 389, 20, 245, 255, 158, 202, 459, 467, 257, 280, 169, 39, 49, 237, 8, 357, 144, 371, 339, 26, 42, 99, 427, 4, 327, 243, 158, 85, 367, 134, 87, 312, 36, 160, 387, 414, 297, 389, 432, 227, 386, 358, 8, 443, 386, 266, 186, 459, 356, 343, 428, 489, 491, 204, 251, 40, 163, 212, 109, 75, 492, 430, 249, 7, 234, 84, 65, 224, 108, 229, 468, 264, 491, 128, 392, 215, 115, 270, 481, 398, 400, 11, 466, 159, 444, 69, 92, 472, 444, 162, 245, 213, 42, 31, 397, 263, 410, 34, 200, 450, 233, 429, 108, 441, 355, 160, 53, 194, 241, 215, 433, 67, 185, 19, 467, 16, 25, 471, 167, 269, 42, 47, 162, 370, 54, 316, 412, 155, 365, 29, 442, 13, 105, 372, 33, 74, 39, 251, 22, 10, 267, 265, 119, 46, 224, 342, 1, 396, 241, 31, 168, 161, 203, 339, 331, 270, 393, 173, 103, 242, 192, 137, 70, 290, 197, 20, 347, 491, 151, 51, 484, 143, 270, 339, 324, 109, 450, 355, 473, 78, 276, 158, 415, 372, 325, 182, 232, 438, 158, 479, 280, 419, 451, 396, 78, 152, 396, 105, 13, 242, 89, 487, 471, 102, 232, 390, 481, 458, 52, 66, 482, 195, 476, 214, 94, 302, 143, 116, 488, 178, 98, 150, 289, 66, 235, 345, 282, 176, 323, 258, 147, 270, 373, 34, 415, 86, 394, 9, 140, 211, 326, 65, 214, 94, 146, 1, 338, 493, 32, 120, 447, 495, 29, 6, 247, 117, 392, 478, 211, 317, 190, 191, 318, 126, 369, 414, 180, 355, 236, 232, 291, 449, 213, 174, 346, 148, 268, 83, 271, 70, 47, 187, 78, 458, 376, 293, 218, 7, 348, 26, 313, 331, 399, 282, 275, 405, 286, 58, 185, 92, 261, 297, 478, 442, 93, 262, 254, 391, 201, 80, 144, 51, 420, 435, 131, 42, 338, 153, 335, 373, 225, 117, 368, 408, 293, 92, 209, 339, 11, 222, 147, 18, 366, 276, 373, 216, 304, 204, 79, 297, 36, 177, 431, 242, 314, 139, 474, 196, 272, 2, 437, 444, 385, 321, 496, 127, 109, 288, 401, 156, 7, 417, 116, 335, 426, 372, 41, 59, 204, 86, 303, 489, 27, 111, 363, 40, 160, 1, 131, 340, 291, 312, 214, 121, 274, 266, 396, 298, 370, 113, 447, 392, 239, 32, 440, 124, 318, 379, 129, 15, 368, 212, 445, 471, 60, 32, 499, 404, 43, 46, 20, 383, 392, 16, 66, 139, 133, 2, 407, 101, 181, 408, 11, 377, 377, 237, 249, 206, 305, 43, 100, 232, 25, 242, 176, 375, 56, 202, 260, 442, 193, 34, 209, 199, 211, 6, 427, 340, 268, 0, 157, 220, 355, 17, 29, 384, 1, 77, 221, 335, 189, 375, 335, 198, 116, 311, 120, 286, 65, 255, 466, 487, 274, 439, 107, 84, 417, 475, 440, 365, 303, 307, 88, 253, 38, 413, 77, 444, 132, 500, 405, 455, 332, 68, 88, 190, 164, 326, 473, 257, 204, 408, 351, 30, 131, 275, 430, 452, 323, 378, 185, 189, 433, 262, 389, 97, 451, 144, 336, 394, 116, 260, 188, 320, 194, 235, 139, 232, 91, 442, 376, 46, 143, 107, 219, 29, 146, 213, 270, 96, 361, 168, 343, 324, 368, 165, 166, 368, 318, 259, 54, 261, 102, 66, 447, 424, 409, 252, 13, 429, 301, 448, 279, 237, 284, 240, 92, 460, 89, 482, 258, 253, 28, 240, 184, 365, 455, 178, 171, 317, 205, 494, 299, 374, 130, 362, 300, 115, 209, 421, 481, 331, 119, 89, 185, 240, 25, 334, 219, 183, 110, 466, 280, 91, 183, 311, 327, 369, 375, 102, 136, 498, 137, 489, 46, 139, 192, 343, 57, 363, 54, 444, 0, 138, 62, 64, 344, 268, 368, 135, 30, 260, 82, 132, 96, 283, 82, 255, 312, 244, 305, 38, 280, 83, 145, 244, 49, 14, 100, 470, 500, 112, 17, 87, 384, 0, 332, 376, 107, 72, 174, 79, 58, 138, 364, 458, 205, 153, 273, 81, 161, 427, 325, 31, 171, 139, 313, 388, 346, 338, 236, 151, 429, 142, 386, 379, 7, 393, 271, 282, 71, 367, 48, 104, 491, 232, 91, 268, 413, 4, 293, 372, 403, 15, 131, 90, 381, 346, 20, 52, 139, 451, 16, 48, 301, 233, 481, 302, 359, 181, 2, 344, 337, 239, 420, 36, 358, 424, 476, 452, 226, 47, 355, 475, 71, 284, 332, 132, 10, 65, 283, 394, 299, 351, 143, 482, 448, 251, 409, 25, 290, 181, 99, 22, 38, 357, 102, 245, 451, 386, 418, 131, 408, 367, 110, 425, 317, 114, 238, 261, 88, 379, 353, 466, 409, 209, 12, 385, 284, 479, 185, 285, 306, 475, 170, 181, 61, 88, 228, 378, 477, 403, 115, 416, 358, 6, 384, 103, 400, 207, 358, 164, 452, 138, 405, 499, 360, 438, 77, 452, 241, 54, 287, 115, 134, 105, 124, 169, 412, 446, 443, 286, 77, 134, 306, 380, 365, 404, 229, 42, 402, 465, 385, 377, 442, 303, 307, 264, 328, 500, 215, 163, 34, 423, 406, 124, 486, 305, 242, 431, 396, 441, 154, 497, 340, 397, 311, 461, 238, 18, 362, 3, 179, 144, 5, 19, 262, 156, 432, 373]
    # Define uma função wrapper para evitar modificar a lista original
    def sort_wrapper(l):
        bubble_sort(l.copy())
    # Executa o benchmark
    benchmark(sort_wrapper, lista_teste)

# Mostrar a lista ordenada
sorted_lista = lista.copy()
bubble_sort(sorted_lista)
print("Sorted list is:")
print(sorted_lista)


@profile
def troca_lista(lista, i):
    """
    Troca os elementos da lista nas posições i e i+1.
    """
    if i < len(lista) - 1:
        lista[i], lista[i + 1] = lista[i + 1], lista[i]
    return lista

if __name__ == "__main__":
    minha_lista = [1, 2, 3, 4, 5]
    troca_lista(minha_lista, 2)